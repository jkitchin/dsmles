Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.17/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from scipy.optimize import leastsq
import numpy as np
from sklearn.base import BaseEstimator, RegressorMixin


class ArrheniusRegressor(BaseEstimator, RegressorMixin):
    R = 8.314 # J / mol / K

    def _arrhenius(self, params, X):
        k0, Ea = params
        return k0 * np.exp(-Ea / self.R / X)

    def _objective(self, params, y, x):
        err = y - self._arrhenius(params, x)
        return err

    def fit(self, X, y):
        '''
        X is the temperature (in K)
        y is the rate constants (in mol/s)

        Fits the Arrhenius equation to X, y.
        '''

        # We need a reasonable guess for the fitting. We estimate it from a 2-pt
        # formula derived from the Arrhenius equation:

        # k1 = k0 exp(-Ea/(R T1))
        # k2 = k0 exp(-Ea/(R T2))
        # Ea = (R T1 T2)/(T1 - T2) * ln(k1 / k2)
        # k0 = exp(ln k1 + Ea / (R T1))
        # We choose Tmin and Tmax for this.
        iT1 = np.argmin(X)
        iT2 = np.argmax(X)

        T1 = X[iT1]
        T2 = X[iT2]
        k1 = y[iT1]
        k2 = y[iT2]

        # These are the initial guesses
        Ea = self.R * T1 * T2 / (T1 - T2) * np.log(k1 / k2)
        k0 = np.exp(np.log(k1) + Ea / self.R / T1)

        self.coefs_, ier = leastsq(self._objective,
                                   (k0, Ea), args=(y, X))
        if ier not in [1, 2, 3, 4]:
            raise Exception('Fitting failed.')

        return self

    def predict(self, X):
        """Returns predictions for X."""
        return self._arrhenius(self.coefs_, X)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 3[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01moptimize[39;00m [38;5;28;01mimport[39;00m leastsq
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase[39;00m [38;5;28;01mimport[39;00m BaseEstimator, RegressorMixin
[1;32m      6[0m [38;5;28;01mclass[39;00m [38;5;21;01mArrheniusRegressor[39;00m(BaseEstimator, RegressorMixin):
[1;32m      7[0m     R [38;5;241m=[39m [38;5;241m8.314[39m [38;5;66;03m# J / mol / K[39;00m

[0;31mModuleNotFoundError[0m: No module named 'sklearn'

